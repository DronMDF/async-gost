
#include <cstdint>
#include <future>
#include <string>
#include <vector>
#include "async-gost.h"

using namespace std;

static const vector<uint8_t> key01 = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };
static const vector<uint8_t> key02 = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
static const vector<uint8_t> key03 = {
	0x55, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xaa, 0xaa,
	0x55, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xaa, 0xaa,
	0x55, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xaa, 0xaa,
	0x55, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xaa, 0xaa };
static const vector<uint8_t> key04 = {
	0xaa, 0xaa, 0xaa, 0xaa, 0x55, 0x55, 0x55, 0x55,
	0xaa, 0xaa, 0xaa, 0xaa, 0x55, 0x55, 0x55, 0x55,
	0xaa, 0xaa, 0xaa, 0xaa, 0x55, 0x55, 0x55, 0x55,
	0xaa, 0xaa, 0xaa, 0xaa, 0x55, 0x55, 0x55, 0x55 };
static const vector<uint8_t> key05 = {
	0x04, 0x75, 0xF6, 0xE0, 0x50, 0x38, 0xFB, 0xFA,
	0xD2, 0xC7, 0xC3, 0x90, 0xED, 0xB3, 0xCA, 0x3D,
	0x15, 0x47, 0x12, 0x42, 0x91, 0xAE, 0x1E, 0x8A,
	0x2F, 0x79, 0xCD, 0x9E, 0xD2, 0xBC, 0xEF, 0xBD };
static const vector<uint8_t> iv01 = {
	0x2A, 0x80, 0xA7, 0xC3, 0xFF, 0xA8, 0xE3, 0x47, };
static const vector<uint8_t> text01 = {
	0xCC, 0xCC, 0xCC, 0xCC, 0x33, 0x33, 0x33, 0x33,
	0x33, 0x33, 0x33, 0x33, 0xCC, 0xCC, 0xCC, 0xCC 	};
static const vector<uint8_t> text02 = {
	0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00,
	0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08,
	0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10,
	0x1F, 0x1E, 0x1D, 0x1C, 0x1B, 0x1A, 0x19, 0x18,
	0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20,
	0x2F, 0x2E, 0x2D, 0x2C, 0x2B, 0x2A, 0x29, 0x28,
	0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30,
	0x3F, 0x3E, 0x3D, 0x3C, 0x3B, 0x3A, 0x39, 0x38,
	0x47, 0x46, 0x45, 0x44, 0x43, 0x42, 0x41, 0x40,
	0x4F, 0x4E, 0x4D, 0x4C, 0x4B, 0x4A, 0x49, 0x48,
	0x57, 0x56, 0x55, 0x54, 0x53, 0x52, 0x51, 0x50,
	0x5F, 0x5E, 0x5D, 0x5C, 0x5B, 0x5A, 0x59, 0x58,
	0x67, 0x66, 0x65, 0x64, 0x63, 0x62, 0x61, 0x60,
	0x6F, 0x6E, 0x6D, 0x6C, 0x6B, 0x6A, 0x69, 0x68,
	0x77, 0x76, 0x75, 0x74, 0x73, 0x72, 0x71, 0x70,
	0x7F, 0x7E, 0x7D, 0x7C, 0x7B, 0x7A, 0x79, 0x78,
	0x87, 0x86, 0x85, 0x84, 0x83, 0x82, 0x81, 0x80,
	0x8F, 0x8E, 0x8D, 0x8C, 0x8B, 0x8A, 0x89, 0x88,
	0x97, 0x96, 0x95, 0x94, 0x93, 0x92, 0x91, 0x90,
	0x9F, 0x9E, 0x9D, 0x9C, 0x9B, 0x9A, 0x99, 0x98,
	0xa7, 0xa6, 0xa5, 0xa4, 0xa3, 0xa2, 0xa1, 0xa0,
	0xaF, 0xaE, 0xaD, 0xaC, 0xaB, 0xaA, 0xa9, 0xa8,
	0xb7, 0xb6, 0xb5, 0xb4, 0xb3, 0xb2, 0xb1, 0xb0,
	0xbF, 0xbE, 0xbD, 0xbC, 0xbB, 0xbA, 0xb9, 0xb8,
	0xc7, 0xc6, 0xc5, 0xc4, 0xc3, 0xc2, 0xc1, 0xc0,
	0xcF, 0xcE, 0xcD, 0xcC, 0xcB, 0xcA, 0xc9, 0xc8,
	0xd7, 0xd6, 0xd5, 0xd4, 0xd3, 0xd2, 0xd1, 0xd0,
	0xdF, 0xdE, 0xdD, 0xdC, 0xdB, 0xdA, 0xd9, 0xd8,
	0xe7, 0xe6, 0xe5, 0xe4, 0xe3, 0xe2, 0xe1, 0xe0,
	0xeF, 0xeE, 0xeD, 0xeC, 0xeB, 0xeA, 0xe9, 0xe8,
	0xf7, 0xf6, 0xf5, 0xf4, 0xf3, 0xf2, 0xf1, 0xf0,
	0xfF, 0xfE, 0xfD, 0xfC, 0xfB, 0xfA, 0xf9, 0xf8 };

//u_int32_t ECB_Test01[] = {
//	0xF5FE5211, 0x17E8D02E,
//	0x6390ED97, 0x3A962C89
//};
//u_int32_t ECB_Test02[] = {
//	0x2A78B7E0, 0x800A0268,
//	0x462DA336, 0xEAB90129
//};
static const vector<uint8_t> ecb03 = {
	0x97, 0xCF, 0xB8, 0x8B, 0x6B, 0xDA, 0x3C, 0x53,
	0xB5, 0x7A, 0x40, 0xBE, 0x4F, 0x5B, 0x05, 0x5C };
static const vector<uint8_t> ecb04 = {
	0x42, 0x97, 0x5a, 0x89, 0x4c, 0x13, 0xDB, 0x02,
	0x25, 0x03, 0xA7, 0xDA, 0x39, 0xDC, 0x5D, 0xB9 };
static const vector<uint8_t> ecb05 = {
	0xD9, 0xBE, 0x1E, 0x40, 0x7D, 0xD7, 0xF5, 0x56,
	0x03, 0x05, 0x79, 0x4E, 0x18, 0x01, 0xFE, 0x73 };
//u_int32_t ECB_Test06[] = {
//	0x984C8C4B, 0xEA4AF215,
//	0x0957C31E, 0xD12EBCB3,
//	0x22F2D1E0, 0x18592D65,
//	0x80FCDFF7, 0x685CDE4B,
//	0x53755346, 0xEC0D46A7,
//	0xD31B1F05, 0xB71A630A,
//	0xE043C478, 0x0EA43E5D,
//	0xA9237E2D, 0xBC02C91B,
//	0xCB840C21, 0xC8070A0D,
//	0xB5FBD07B, 0x5C04141A,
//	0x719753A2, 0x8FC25C2E,
//	0x526F3F39, 0x4E2630F2,
//	0x01D1E08C, 0xD3DC6D75,
//	0xCA1E7903, 0x120EC1D5,
//	0xE2780A53, 0xEA1CB10A,
//	0xB955F83A, 0xBA0BE17C,
//	0xEB96C8A0, 0x60D35A50,
//	0x980FA343, 0x6D50D9DB,
//	0x01AF9163, 0x5A75E940,
//	0x191F5C46, 0x9B890B4A,
//	0xF5F8F6C4, 0xFA3F872F,
//	0x25F8D426, 0x82981FBA,
//	0x2DAF26FC, 0x58C4F9C0,
//	0x8009FA49, 0x34A46202,
//	0x6B5ACB2D, 0x085D61AB,
//	0x08E026D4, 0x022ED613,
//	0xD0E8372A, 0xC7F136CF,
//	0x219B3FC0, 0x2D29BD60,
//	0x4E48012E, 0x16208FF8,
//	0xDC82BF8A, 0x18A37A32,
//	0x5950D169, 0x6CF29131,
//	0x58CA5F5A, 0xB22DB29A
//};

//u_int32_t CFB_Test01[] = {
//	0x28A5FC57, 0xD6F0A95A,
//	0x84626C1A, 0xC4DF8CC1
//};
//u_int32_t CFB_Test02[] = {
//	0x3B6A55EC, 0x5508C3A5,
//	0x2172F124, 0x8EA70D76
//};
//u_int32_t CFB_Test03[] = {
//	0x6815713D, 0x0F11C424,
//	0xB3A22BE2, 0xC2003BE0
//};
//u_int32_t CFB_Test04[] = {
//	0x655F02F8, 0x25A67889,
//	0x7C21350B, 0x79FBE22F
//};
static const vector<uint8_t> cfb05 = {
	0x3B, 0x4C, 0x22, 0x43, 0x10, 0xBD, 0x64, 0x4B,
	0x99, 0xEB, 0x48, 0x55, 0xD9, 0x6C, 0xAA, 0x0F };

//u_int32_t IMIT_Test01[] = {
//	0xFD4BBE83
//};
//u_int32_t IMIT_Test02[] = {
//	0xA8B979F7
//};
//u_int32_t IMIT_Test03[] = {
//	0xD461FE01
//};
//u_int32_t IMIT_Test04[] = {
//	0x12394623
//};
//u_int32_t IMIT_Test05[] = {
//	0x5AC9272C
//};
static const vector<uint8_t> imit06 = { 0x54, 0x8F, 0x73, 0x46 };

static
void crypto_one_test(const string &name, future<ContextReply> context, const vector<uint8_t> expected)
{
	auto result = context.get().data;
	if (!equal(expected.begin(), expected.end(), result.begin())) {
		throw runtime_error(name + ": Ошибка тестирования");
	}
}

void crypto_self_test()
{
	//crypto_one_test("ecb encrypt 1", async_ecb_encrypt(text01, key01), ecb01);
	//crypto_one_test("ecb encrypt 2", async_ecb_encrypt(text01, key02), ecb02);
	crypto_one_test("ecb encrypt 3", async_ecb_encrypt(text01, key03), ecb03);
	crypto_one_test("ecb encrypt 4", async_ecb_encrypt(text01, key04), ecb04);
	crypto_one_test("ecb encrypt 5", async_ecb_encrypt(text01, key05), ecb05);
	//crypto_one_test("ecb encrypt 6", async_ecb_encrypt(text02, key05), ecb06);

	//crypto_one_test("cfb encrypt 1", async_cfb_encrypt(text01, key01, iv01), cfb01);
	//crypto_one_test("cfb encrypt 2", async_cfb_encrypt(text01, key02, iv01), cfb02);
	//crypto_one_test("cfb encrypt 3", async_cfb_encrypt(text01, key03, iv01), cfb03);
	//crypto_one_test("cfb encrypt 4", async_cfb_encrypt(text01, key04, iv01), cfb04);
	crypto_one_test("cfb encrypt 5", async_cfb_encrypt(text01, key05, iv01), cfb05);

	//crypto_one_test("cfb decrypt 1", async_cfb_decrypt(cfb01, key01, iv01), text01);
	//crypto_one_test("cfb decrypt 2", async_cfb_decrypt(cfb02, key02, iv01), text01);
	//crypto_one_test("cfb decrypt 3", async_cfb_decrypt(cfb03, key03, iv01), text01);
	//crypto_one_test("cfb decrypt 4", async_cfb_decrypt(cfb04, key04, iv01), text01);
	crypto_one_test("cfb decrypt 5", async_cfb_decrypt(cfb05, key05, iv01), text01);

	//crypto_one_test("imit 1", async_imit(text01, key01), imit01);
	//crypto_one_test("imit 2", async_imit(text01, key02), imit02);
	//crypto_one_test("imit 3", async_imit(text01, key03), imit03);
	//crypto_one_test("imit 4", async_imit(text01, key04), imit04);
	//crypto_one_test("imit 5", async_imit(text01, key05), imit05);
	crypto_one_test("imit 6", async_imit(text02, key05), imit06);
}
