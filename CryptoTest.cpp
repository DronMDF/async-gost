
#include <cstdint>
#include <future>
#include <string>
#include <vector>
#include "async-gost.h"

using namespace std;

static const vector<uint8_t> key01 = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };
static const vector<uint8_t> key02 = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
static const vector<uint8_t> key03 = {
	0x55, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xaa, 0xaa,
	0x55, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xaa, 0xaa,
	0x55, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xaa, 0xaa,
	0x55, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xaa, 0xaa };
static const vector<uint8_t> key04 = {
	0xaa, 0xaa, 0xaa, 0xaa, 0x55, 0x55, 0x55, 0x55,
	0xaa, 0xaa, 0xaa, 0xaa, 0x55, 0x55, 0x55, 0x55,
	0xaa, 0xaa, 0xaa, 0xaa, 0x55, 0x55, 0x55, 0x55,
	0xaa, 0xaa, 0xaa, 0xaa, 0x55, 0x55, 0x55, 0x55 };
static const vector<uint8_t> key05 = {
	0x04, 0x75, 0xF6, 0xE0, 0x50, 0x38, 0xFB, 0xFA,
	0xD2, 0xC7, 0xC3, 0x90, 0xED, 0xB3, 0xCA, 0x3D,
	0x15, 0x47, 0x12, 0x42, 0x91, 0xAE, 0x1E, 0x8A,
	0x2F, 0x79, 0xCD, 0x9E, 0xD2, 0xBC, 0xEF, 0xBD };
static const vector<uint8_t> iv01 = {
	0x2A, 0x80, 0xA7, 0xC3, 0xFF, 0xA8, 0xE3, 0x47, };
static const vector<uint8_t> text01 = {
	0xCC, 0xCC, 0xCC, 0xCC, 0x33, 0x33, 0x33, 0x33,
	0x33, 0x33, 0x33, 0x33, 0xCC, 0xCC, 0xCC, 0xCC 	};
static const vector<uint8_t> text02 = {
	0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00,
	0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08,
	0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10,
	0x1F, 0x1E, 0x1D, 0x1C, 0x1B, 0x1A, 0x19, 0x18,
	0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20,
	0x2F, 0x2E, 0x2D, 0x2C, 0x2B, 0x2A, 0x29, 0x28,
	0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30,
	0x3F, 0x3E, 0x3D, 0x3C, 0x3B, 0x3A, 0x39, 0x38,
	0x47, 0x46, 0x45, 0x44, 0x43, 0x42, 0x41, 0x40,
	0x4F, 0x4E, 0x4D, 0x4C, 0x4B, 0x4A, 0x49, 0x48,
	0x57, 0x56, 0x55, 0x54, 0x53, 0x52, 0x51, 0x50,
	0x5F, 0x5E, 0x5D, 0x5C, 0x5B, 0x5A, 0x59, 0x58,
	0x67, 0x66, 0x65, 0x64, 0x63, 0x62, 0x61, 0x60,
	0x6F, 0x6E, 0x6D, 0x6C, 0x6B, 0x6A, 0x69, 0x68,
	0x77, 0x76, 0x75, 0x74, 0x73, 0x72, 0x71, 0x70,
	0x7F, 0x7E, 0x7D, 0x7C, 0x7B, 0x7A, 0x79, 0x78,
	0x87, 0x86, 0x85, 0x84, 0x83, 0x82, 0x81, 0x80,
	0x8F, 0x8E, 0x8D, 0x8C, 0x8B, 0x8A, 0x89, 0x88,
	0x97, 0x96, 0x95, 0x94, 0x93, 0x92, 0x91, 0x90,
	0x9F, 0x9E, 0x9D, 0x9C, 0x9B, 0x9A, 0x99, 0x98,
	0xa7, 0xa6, 0xa5, 0xa4, 0xa3, 0xa2, 0xa1, 0xa0,
	0xaF, 0xaE, 0xaD, 0xaC, 0xaB, 0xaA, 0xa9, 0xa8,
	0xb7, 0xb6, 0xb5, 0xb4, 0xb3, 0xb2, 0xb1, 0xb0,
	0xbF, 0xbE, 0xbD, 0xbC, 0xbB, 0xbA, 0xb9, 0xb8,
	0xc7, 0xc6, 0xc5, 0xc4, 0xc3, 0xc2, 0xc1, 0xc0,
	0xcF, 0xcE, 0xcD, 0xcC, 0xcB, 0xcA, 0xc9, 0xc8,
	0xd7, 0xd6, 0xd5, 0xd4, 0xd3, 0xd2, 0xd1, 0xd0,
	0xdF, 0xdE, 0xdD, 0xdC, 0xdB, 0xdA, 0xd9, 0xd8,
	0xe7, 0xe6, 0xe5, 0xe4, 0xe3, 0xe2, 0xe1, 0xe0,
	0xeF, 0xeE, 0xeD, 0xeC, 0xeB, 0xeA, 0xe9, 0xe8,
	0xf7, 0xf6, 0xf5, 0xf4, 0xf3, 0xf2, 0xf1, 0xf0,
	0xfF, 0xfE, 0xfD, 0xfC, 0xfB, 0xfA, 0xf9, 0xf8 };
static const vector<uint8_t> text03 = {
	0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00,
	0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08,
	0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10,
	0x1F, 0x1E, 0x1D, 0x1C, 0x1B, 0x1A, 0x19, 0x18,
	0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20,
	0x2F, 0x2E, 0x2D, 0x2C, 0x2B, 0x2A, 0x29, 0x28,
	0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30,
	0x3F, 0x3E, 0x3D, 0x3C, 0x3B, 0x3A, 0x39, 0x38,
	0x47, 0x46, 0x45, 0x44, 0x43, 0x42, 0x41, 0x40,
	0x4F, 0x4E, 0x4D, 0x4C, 0x4B, 0x4A, 0x49, 0x48,
	0x57, 0x56, 0x55, 0x54, 0x53, 0x52, 0x51, 0x50,
	0x5F, 0x5E, 0x5D, 0x5C, 0x5B, 0x5A, 0x59, 0x58,
	0x67, 0x66, 0x65, 0x64, 0x63, 0x62, 0x61, 0x60,
	0x6F, 0x6E, 0x6D, 0x6C, 0x6B, 0x6A, 0x69, 0x68,
	0x77, 0x76, 0x75, 0x74, 0x73, 0x72, 0x71, 0x70,
	0x7F, 0x7E, 0x7D, 0x7C, 0x7B, 0x7A, 0x79, 0x78,
	0x87, 0x86, 0x85, 0x84, 0x83, 0x82, 0x81, 0x80,
	0x8F, 0x8E, 0x8D, 0x8C, 0x8B, 0x8A, 0x89, 0x88,
	0x97, 0x96, 0x95, 0x94, 0x93, 0x92, 0x91, 0x90,
	0x9F, 0x9E, 0x9D, 0x9C, 0x9B, 0x9A, 0x99, 0x98,
	0xa7, 0xa6, 0xa5, 0xa4, 0xa3, 0xa2, 0xa1, 0xa0,
	0xaF, 0xaE, 0xaD, 0xaC, 0xaB, 0xaA, 0xa9, 0xa8,
	0xb7, 0xb6, 0xb5, 0xb4, 0xb3, 0xb2, 0xb1, 0xb0,
	0xbF, 0xbE, 0xbD, 0xbC, 0xbB, 0xbA, 0xb9, 0xb8,
	0xc7, 0xc6, 0xc5, 0xc4, 0xc3, 0xc2, 0xc1, 0xc0,
	0xcF, 0xcE, 0xcD, 0xcC, 0xcB, 0xcA, 0xc9, 0xc8,
	0xd7, 0xd6, 0xd5, 0xd4, 0xd3, 0xd2, 0xd1, 0xd0,
	0xdF, 0xdE, 0xdD, 0xdC, 0xdB, 0xdA, 0xd9, 0xd8,
	0xe7, 0xe6, 0xe5, 0xe4, 0xe3, 0xe2, 0xe1, 0xe0,
	0xeF, 0xeE, 0xeD, 0xeC, 0xeB, 0xeA, 0xe9, 0xe8,
	0xf7, 0xf6, 0xf5, 0xf4, 0xf3, 0xf2, 0xf1, 0xf0,
	0xfF, 0xfE, 0xfD, 0xfC, 0xfB, 0xfA, 0xf9, 0xf8,
	0x29, 0x63, 0xFA, 0xEF };

//u_int32_t ECB_Test01[] = {
//	0xF5FE5211, 0x17E8D02E,
//	0x6390ED97, 0x3A962C89
//};
//u_int32_t ECB_Test02[] = {
//	0x2A78B7E0, 0x800A0268,
//	0x462DA336, 0xEAB90129
//};
static const vector<uint8_t> ecb03 = {
	0x97, 0xCF, 0xB8, 0x8B, 0x6B, 0xDA, 0x3C, 0x53,
	0xB5, 0x7A, 0x40, 0xBE, 0x4F, 0x5B, 0x05, 0x5C };
static const vector<uint8_t> ecb04 = {
	0x42, 0x97, 0x5a, 0x89, 0x4c, 0x13, 0xDB, 0x02,
	0x25, 0x03, 0xA7, 0xDA, 0x39, 0xDC, 0x5D, 0xB9 };
static const vector<uint8_t> ecb05 = {
	0xD9, 0xBE, 0x1E, 0x40, 0x7D, 0xD7, 0xF5, 0x56,
	0x03, 0x05, 0x79, 0x4E, 0x18, 0x01, 0xFE, 0x73 };
//u_int32_t ECB_Test06[] = {
//	0x984C8C4B, 0xEA4AF215,
//	0x0957C31E, 0xD12EBCB3,
//	0x22F2D1E0, 0x18592D65,
//	0x80FCDFF7, 0x685CDE4B,
//	0x53755346, 0xEC0D46A7,
//	0xD31B1F05, 0xB71A630A,
//	0xE043C478, 0x0EA43E5D,
//	0xA9237E2D, 0xBC02C91B,
//	0xCB840C21, 0xC8070A0D,
//	0xB5FBD07B, 0x5C04141A,
//	0x719753A2, 0x8FC25C2E,
//	0x526F3F39, 0x4E2630F2,
//	0x01D1E08C, 0xD3DC6D75,
//	0xCA1E7903, 0x120EC1D5,
//	0xE2780A53, 0xEA1CB10A,
//	0xB955F83A, 0xBA0BE17C,
//	0xEB96C8A0, 0x60D35A50,
//	0x980FA343, 0x6D50D9DB,
//	0x01AF9163, 0x5A75E940,
//	0x191F5C46, 0x9B890B4A,
//	0xF5F8F6C4, 0xFA3F872F,
//	0x25F8D426, 0x82981FBA,
//	0x2DAF26FC, 0x58C4F9C0,
//	0x8009FA49, 0x34A46202,
//	0x6B5ACB2D, 0x085D61AB,
//	0x08E026D4, 0x022ED613,
//	0xD0E8372A, 0xC7F136CF,
//	0x219B3FC0, 0x2D29BD60,
//	0x4E48012E, 0x16208FF8,
//	0xDC82BF8A, 0x18A37A32,
//	0x5950D169, 0x6CF29131,
//	0x58CA5F5A, 0xB22DB29A
//};

//u_int32_t CFB_Test01[] = {
//	0x28A5FC57, 0xD6F0A95A,
//	0x84626C1A, 0xC4DF8CC1
//};
//u_int32_t CFB_Test02[] = {
//	0x3B6A55EC, 0x5508C3A5,
//	0x2172F124, 0x8EA70D76
//};
//u_int32_t CFB_Test03[] = {
//	0x6815713D, 0x0F11C424,
//	0xB3A22BE2, 0xC2003BE0
//};
//u_int32_t CFB_Test04[] = {
//	0x655F02F8, 0x25A67889,
//	0x7C21350B, 0x79FBE22F
//};
static const vector<uint8_t> cfb05 = {
	0x3B, 0x4C, 0x22, 0x43, 0x10, 0xBD, 0x64, 0x4B,
	0x99, 0xEB, 0x48, 0x55, 0xD9, 0x6C, 0xAA, 0x0F };

//u_int32_t IMIT_Test01[] = {
//	0xFD4BBE83
//};
//u_int32_t IMIT_Test02[] = {
//	0xA8B979F7
//};
//u_int32_t IMIT_Test03[] = {
//	0xD461FE01
//};
//u_int32_t IMIT_Test04[] = {
//	0x12394623
//};
//u_int32_t IMIT_Test05[] = {
//	0x5AC9272C
//};
static const vector<uint8_t> imit06 = { 0x54, 0x8F, 0x73, 0x46 };
//u_int32_t IMIT_CFB_Text01[] = {
//	0xb0f57479
//};
//u_int32_t C_IMIT_CFB_Text02[] = {
//	0x5ec25a13
//};
//u_int32_t S_IMIT_CFB_Text02[] = {
//	0xbb5c6cbe
//};
//u_int32_t IMIT_CFB_Text02_124[] = {
//	0xb4bdbcce
//};
//u_int32_t C_IMIT_CFB_Text02_124[] = {
//	0x79abe735
//};
//u_int32_t S_IMIT_CFB_Text02_124[] = {
//	0x57839f24
//};
//u_int32_t S_IMIT_CFB_Text03_257[] = {
//	0x1a7423e3
//};
//u_int32_t C_IMIT_CFB_Text03_257[] = {
//	0x684a9ebd
//};

//u_int32_t CFB_Text02[] = {
//0xe06c369c,
//0xe5c2986a,
//0xf1d71c10,
//0x1a56d16f,
//0x6ddda7d2,
//0x626b7973,
//0x3b446656,
//0x2d817a22,
//0x9f7c8acd,
//0xc6a5ceb4,
//0x24e054f2,
//0x87bab94c,
//0xc6d2991b,
//0xba76f7ca,
//0xdc755ea7,
//0x219c65fb,
//0x938e957f,
//0x3d4bced1,
//0xe06974d4,
//0x0f5ea8da,
//0x2686a64d,
//0x36f58951,
//0xcb31ddf9,
//0x53a56489,
//0xdf299200,
//0xf748266a,
//0x00e9bb6a,
//0x48129b98,
//0x3f16959f,
//0xa5f78419,
//0x4e295620,
//0xbd76aae5,
//0x7b39e290,
//0xc7f7ae05,
//0xef252159,
//0x7aeb7668,
//0x7135b4fa,
//0x5d32c343,
//0x8989da1a,
//0xb0e211d2,
//0x406fc7ee,
//0xed75b570,
//0xba8a0d2b,
//0x21ffe348,
//0x07e02c52,
//0x047bf130,
//0x1fe8ddf6,
//0x895276ba,
//0xe107a944,
//0xd4fdea78,
//0xcb22b6a8,
//0x165d4c69,
//0x3a9f47a5,
//0x04e0a832,
//0xff996958,
//0x7b2fb161,
//0x530db53e,
//0x25b72894,
//0x6054c44c,
//0x3f8c1850,
//0x7fef40a9,
//0xe77809d6,
//0xf973ff13,
//0x405f53f0
//};
//u_int32_t S_CFB_Text02[] = {
//0xd62ad25a,
//0x3a9eb740,
//0x8a866c04,
//0xb587b52f,
//0x02302196,
//0xa4aa5b22,
//0x05012aed,
//0xaa24a925,
//0x6b5ecd1c,
//0xf505c5b8,
//0x51895512,
//0x187b733f,
//0xf9dc5c6c,
//0x6a693140,
//0xd8540ea4,
//0xddfaa052,
//0x6e161f76,
//0x76b40304,
//0x321879c5,
//0xc1841c0c,
//0x7304e5a8,
//0xb1378f20,
//0x426624dd,
//0x47315fb3,
//0x00629b39,
//0x7a23aa62,
//0x4e2f3c92,
//0xddde4a99,
//0x352de5a3,
//0x714f41fd,
//0x74a5ed92,
//0xda6fed1c,
//0xcf7bf48f,
//0xdad04c96,
//0x62801c10,
//0xd5715f3c,
//0xbc1f2ec4,
//0x87e71f6c,
//0x20c5eac8,
//0x9025fbf6,
//0x32e94866,
//0x87394b17,
//0xda93f31b,
//0x8bfc94a9,
//0x0f91af1a,
//0xe5cc5c3a,
//0x438c5327,
//0x81319059,
//0x7f0fead9,
//0x6d91311d,
//0x25d64e25,
//0xa276515d,
//0xf8a23ae7,
//0xe9047993,
//0xa6eb7725,
//0x60971ec2,
//0x3410a0fc,
//0x3b2ddc34,
//0x409e91d4,
//0x7ce46150,
//0x79d0e81f,
//0xd5dc5fea,
//0xfd1765a7,
//0xd1e6a5c3
//};
//u_int32_t S_CFB_Text02_124[] = {
//0xd62ad25a,
//0x3a9eb740,
//0x8a866c04,
//0xb587b52f,
//0x02302196,
//0xa4aa5b22,
//0x05012aed,
//0xaa24a925,
//0x6b5ecd1c,
//0xf505c5b8,
//0x51895512,
//0x187b733f,
//0xf9dc5c6c,
//0x6a693140,
//0xd8540ea4,
//0xddfaa052,
//0x6e161f76,
//0x76b40304,
//0x321879c5,
//0xc1841c0c,
//0x7304e5a8,
//0xb1378f20,
//0x426624dd,
//0x47315fb3,
//0x00629b39,
//0x7a23aa62,
//0x4e2f3c92,
//0xddde4a99,
//0x352de5a3,
//0x714f41fd,
//0x74a5ed92
//};
//char S_CFB_Text03_257[] = {
//0x5a,0xd2,0x2a,0xd6,
//0x40,0xb7,0x9e,0x3a,
//0x04,0x6c,0x86,0x8a,
//0x2f,0xb5,0x87,0xb5,
//0x96,0x21,0x30,0x02,
//0x22,0x5b,0xaa,0xa4,
//0xed,0x2a,0x01,0x05,
//0x25,0xa9,0x24,0xaa,
//0x1c,0xcd,0x5e,0x6b,
//0xb8,0xc5,0x05,0xf5,
//0x12,0x55,0x89,0x51,
//0x3f,0x73,0x7b,0x18,
//0x6c,0x5c,0xdc,0xf9,
//0x40,0x31,0x69,0x6a,
//0xa4,0x0e,0x54,0xd8,
//0x52,0xa0,0xfa,0xdd,
//0x76,0x1f,0x16,0x6e,
//0x04,0x03,0xb4,0x76,
//0xc5,0x79,0x18,0x32,
//0x0c,0x1c,0x84,0xc1,
//0xa8,0xe5,0x04,0x73,
//0x20,0x8f,0x37,0xb1,
//0xdd,0x24,0x66,0x42,
//0xb3,0x5f,0x31,0x47,
//0x39,0x9b,0x62,0x00,
//0x62,0xaa,0x23,0x7a,
//0x92,0x3c,0x2f,0x4e,
//0x99,0x4a,0xde,0xdd,
//0xa3,0xe5,0x2d,0x35,
//0xfd,0x41,0x4f,0x71,
//0x92,0xed,0xa5,0x74,
//0x1c,0xed,0x6f,0xda,
//0x8f,0xf4,0x7b,0xcf,
//0x96,0x4c,0xd0,0xda,
//0x10,0x1c,0x80,0x62,
//0x3c,0x5f,0x71,0xd5,
//0xc4,0x2e,0x1f,0xbc,
//0x6c,0x1f,0xe7,0x87,
//0xc8,0xea,0xc5,0x20,
//0xf6,0xfb,0x25,0x90,
//0x66,0x48,0xe9,0x32,
//0x17,0x4b,0x39,0x87,
//0x1b,0xf3,0x93,0xda,
//0xa9,0x94,0xfc,0x8b,
//0x1a,0xaf,0x91,0x0f,
//0x3a,0x5c,0xcc,0xe5,
//0x27,0x53,0x8c,0x43,
//0x59,0x90,0x31,0x81,
//0xd9,0xea,0x0f,0x7f,
//0x1d,0x31,0x91,0x6d,
//0x25,0x4e,0xd6,0x25,
//0x5d,0x51,0x76,0xa2,
//0xe7,0x3a,0xa2,0xf8,
//0x93,0x79,0x04,0xe9,
//0x25,0x77,0xeb,0xa6,
//0xc2,0x1e,0x97,0x60,
//0xfc,0xa0,0x10,0x34,
//0x34,0xdc,0x2d,0x3b,
//0xd4,0x91,0x9e,0x40,
//0x50,0x61,0xe4,0x7c,
//0x1f,0xe8,0xd0,0x79,
//0xea,0x5f,0xdc,0xd5,
//0xa7,0x65,0x17,0xfd,
//0xc3,0xa5,0xe6,0xd1,
//0x2c
//};

static
void crypto_one_test(const string &name, future<ContextReply> context, const vector<uint8_t> expected)
{
	auto result = context.get().data;
	if (!equal(expected.begin(), expected.end(), result.begin())) {
		throw runtime_error(name + ": Ошибка тестирования");
	}
}

void crypto_self_test()
{
	crypto_one_test("ecb encrypt 3", async_ecb_encrypt(text01, key03), ecb03);
	crypto_one_test("ecb encrypt 4", async_ecb_encrypt(text01, key04), ecb04);
	crypto_one_test("ecb encrypt 5", async_ecb_encrypt(text01, key05), ecb05);

	crypto_one_test("cfb encrypt 5", async_cfb_encrypt(text01, key05, iv01), cfb05);

	crypto_one_test("cfb decrypt 5", async_cfb_decrypt(cfb05, key05, iv01), text01);

	crypto_one_test("imit 6", async_imit(text02, key05), imit06);
}
